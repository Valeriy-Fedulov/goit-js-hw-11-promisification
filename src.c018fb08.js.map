{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","promise","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAAA,MAAMA,EAAQC,IAMLC,OALS,IAAIC,QAAQ,CAACC,EAASC,KACpCC,WAAW,KACTF,EAAQH,IACPA,MAKDM,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDR,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,KAAMW,KAAKJ,GACjBP,EAAM,MAAMW,KAAKJ;;ACdjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAO1Bf,OANS,IAAIC,QAAQ,CAACC,EAASC,KAIpCD,EAHqBY,EAASE,IAAIC,GAChCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,OAO7DZ,EAASa,GAAgBX,QAAQY,MAAMD,GAK7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACvBnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB7B,MAAAA,EAAQsB,EAA0B,IAAK,KAatCpB,OAXS,IAAIC,QAAQ,CAACC,EAASC,KACpCC,WAAW,KACQmB,KAAKE,SAAW,GAG/BvB,EAAQ,CAAE0B,GAAID,EAAYC,GAAItB,KAAMR,IAEpCK,EAAOwB,EAAYC,KAEpB9B,MAMD+B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACxBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG1CwB,EAAWF,IACfrB,QAAQwB,qCAAqCH,+BAM/CF,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETJ,EAAgB,CAAEE,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH;;AC7CT,aAFA,QAAA,iBACA,QAAA,iBACA,QAAA","file":"src.c018fb08.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n  return promise;\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const promise = new Promise((resolve, reject) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n  return promise;\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n    } else {\n        reject(transaction.id);\n    }\n    }, delay);\n  });\n  return promise;\n};\n\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","import './js/task1.js';\nimport './js/task2.js';\nimport './js/task3.js';"]}